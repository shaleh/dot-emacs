#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en

My Emacs config in ORG mode.

* General Editing
#+BEGIN_SRC emacs-lisp
(setq enable-local-variables :safe)
(defvar recentf-list)
#+END_SRC
** browse kill ring
#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
     :ensure t
     :config
     (global-set-key (kbd "C-c y") 'browse-kill-ring))
#+END_SRC
** copy-as-format
Helps when pasting to various places.

#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
     :ensure t
     :config
     (global-set-key (kbd "C-c w s")  'copy-as-format-slack)
     (global-set-key (kbd "C-c w g")  'copy-as-format-github))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t)
#+END_SRC
** Project support
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t)
#+END_SRC
** find file in repository

#+BEGIN_SRC emacs-lisp
(use-package find-file-in-repository
     :ensure t
     :config
     (global-set-key (kbd "C-x C-f")  'find-file-in-repository))
#+END_SRC
** magit
Super helpful Git porcelain.
#+BEGIN_SRC emacs-lisp
(defun my/magit-kill-buffers ()
  "Restore window configuration and kill all Magit buffers."
  (interactive)
  (let ((buffers (magit-mode-get-buffers)))
    (magit-restore-window-configuration)
    (mapc #'kill-buffer buffers)))

(use-package magit
  :bind (:map magit-status-mode-map
	    ("q" . #'my/magit-kill-buffers))
  :ensure t)
(use-package forge
  :ensure t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t)
#+END_SRC
** move where I mean
#+BEGIN_SRC emacs-lisp
(use-package mwim
     :ensure t
     :config
     (global-set-key (kbd "C-a") 'mwim-beginning-of-code-or-line))
#+END_SRC
** string inflection
#+BEGIN_SRC emacs-lisp
(use-package string-inflection
	     :ensure t)
#+END_SRC
** work on whole line or region
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
	     :ensure t)
#+END_SRC
** Completion support
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :delight
  :bind (("C-c ." . company-complete)
         ("C-c C-." . company-complete)
         ("C-c s s" . company-yasnippet)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("C-d" . company-show-doc-buffer)
         ("M-." . company-show-location))
  :init
  (add-hook 'c-mode-common-hook 'company-mode)
  (add-hook 'sgml-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'text-mode-hook 'company-mode)
  (add-hook 'lisp-mode-hook 'company-mode)
  :config
  (eval-after-load 'c-mode
    '(define-key c-mode-map (kbd "[tab]") 'company-complete))

  (setq company-tooltip-limit 20)
  (setq company-show-numbers t)
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 0)
  (setq company-echo-delay 0)

  (setq company-backends '(company-capf
                           company-keywords
                           company-semantic
                           company-files
                           company-etags
                           company-elisp
                           company-clang
                           company-irony-c-headers
                           company-irony
                           company-jedi
                           company-cmake
                           company-ispell
                           company-yasnippet))

  (global-company-mode))

(use-package company-quickhelp
  :ensure t
  :after company
  :config
  (setq company-quickhelp-idle-delay 0.1)
  (company-quickhelp-mode 1))

(use-package company-statistics
  :ensure t
  :after company
  :config
  (company-statistics-mode))

(use-package helm-company
  :ensure t
  :requires helm
  :after (helm company)
  :bind (("C-c C-;" . helm-company))
  :commands (helm-company)
  :init
  (define-key company-mode-map (kbd "C-;") 'helm-company)
  (define-key company-active-map (kbd "C-;") 'helm-company))

(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
               :ensure t)
  (yas-global-mode t)
  (add-to-list #'yas-snippet-dirs (concat user-emacs-directory (convert-standard-filename "snippets")))
  (yas-reload-all)
  (setq yas-prompt-functions '(yas-ido-prompt))
  (defun help/yas-after-exit-snippet-hook-fn ()
    (prettify-symbols-mode))
  (add-hook 'yas-after-exit-snippet-hook #'help/yas-after-exit-snippet-hook-fn)
  :diminish yas-minor-mode)
#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
     :ensure t
     :config
     (which-key-mode))
#+END_SRC
* Searching
** deadgrep
Wilfred's amazing interface to ripgrep.

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
     :ensure t
     :config
     (global-set-key (kbd "C-c g") 'deadgrep))
#+END_SRC
** google-this
#+BEGIN_SRC emacs-lisp
(use-package google-this
     :ensure t
     :config
     (global-set-key (kbd "s-g") 'google-this))
#+END_SRC
** github browse file
Handy tool to generate a GitHub link from a link in source.

#+BEGIN_SRC emacs-lisp
(use-package github-browse-file
  :ensure t)
#+END_SRC
* Text
** Comma Separated Values
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
     :ensure t)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
     :ensure t)
#+END_SRC
** Org Mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-cb" 'org-iswitchb)
(setq org-log-done t)
(setq org-directory (concat my/home-dir "org"))
(setq org-agenda-files (list (concat org-directory "/agendas")))
(setq org-default-notes-file (concat org-directory (convert-standard-filename "captured-notes.org")))
(setq org-startup-indented nil)
(setq org-startup-folded nil)
(setq org-enforce-todo-dependencies t)
(setq org-todo-keywords '((sequence "TODO" "IN_PROGRESS" "|" "DONE")))
#+END_SRC
* Shell
** Eshell
*** Support
#+BEGIN_SRC emacs-lisp
(require 'eshell)
(require 'em-smart)

(defun my/eshell-maybe-bol ()
  (interactive)
  (let ((p (point)))
    (eshell-bol)
    (if (= p (point))
        (beginning-of-line)
      )
    )
  )

(defun my/shell-here ()
  (interactive)
  (let ((cur default-directory))
    (split-window-sensibly)
    (other-window 1)
    (eshell)
    (eshell/cd cur)
    (insert "")
    (eshell-send-input)
   )
 )
#+END_SRC 
*** Hook
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook
   (lambda ()
     (eshell/export "EDITOR=~/bin/edit")
     (eshell/addpath my/bin-dir "/usr/local/bin")
     (setq show-trailing-whitespace nil)
     (local-set-key (kbd "C-a") 'eshell-bol)
     (setq yas--dont-activate t)
    )
 )
#+END_SRC
*** Options
#+BEGIN_SRC emacs-lisp
(setq eshell-directory-name (concat user-emacs-directory (convert-standard-filename "eshell"))
      eshell-history-file-name (concat user-emacs-directory (convert-standard-filename "state/eshell-history"))
      eshell-last-dir-ring-file-name (concat user-emacs-directory (convert-standard-filename "state/eshell-lastdir"))
      eshell-where-to-jump 'begin
      eshell-review-quick-commands nil
      eshell-smart-space-goes-to-end t
 )
#+END_SRC
*** Prompt
#+BEGIN_SRC emacs-lisp
(setq eshell-prompt-function
  (lambda ()
    (concat (if (> (length (eshell/pwd)) 50)
               (let* ((split_path (split-string (eshell/pwd) "/"))
                      (first_char (lambda (s) (if (zerop (length s)) nil (substring s 0 1))))
                      (shortened (mapconcat 'identity (mapcar first_char (butlast split_path 3)) "/"))
                      (minimal_path_parts (reverse (delq nil (subseq (reverse split_path) 0 3))))
                      (minimal_path (mapconcat 'identity minimal_path_parts "/"))
                      )
                 (concat shortened "/" minimal_path)
                )
              (eshell/pwd)
             )
       " $ "
     )
   )
 )
#+END_SRC
* General Programming
** Helpers and Tools
*** Fill Column Indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
	     :ensure t)
#+END_SRC
*** FIC mode
Highlight FIXME and similar.
#+BEGIN_SRC emacs-lisp
(use-package fic-mode
   :ensure t)
#+END_SRC
*** Indent Guide
#+BEGIN_SRC emacs-lisp
(use-package indent-guide
	     :ensure t)
#+END_SRC
** Language Server support
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :config
  (lsp-register-custom-settings
   '(("pyls.plugins.pyls_black.enabled" t t)
     ("pyls.plugins.flake8.enabled" t t)
     ("pyls.plugins.pyls_mypy.enabled" t t)
     ("pyls.plugins.pyls_mypy.live_mode" nil t)
     ("pyls.plugins.pyls_isort.enabled" t t)))
  (setq lsp-prefer-flymake nil)
  :hook
  ((python-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration)))

(use-package lsp-ui
  :ensure t
  :requires lsp-mode flycheck
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25)

  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  :commands lsp-ui-mode)
#+END_SRC
** Languages
First, my common hook for most languages.
It enables flycheck, flyspell, FIXME, line numbers, and more.
#+BEGIN_SRC emacs-lisp
  ;; Initially no known indented modes. Filled in as languages are used.
  (defvar my/indented-modes '())

  (defun my/common-programming-hook ()
     (setq indent-tabs-mode nil)
     (fci-mode) ; Fill Column Indicator.
     (fic-mode) ; FIXME handling.
     (flyspell-prog-mode)
     (flycheck-mode)
     (if (boundp 'display-line-numbers)
	 (setq display-line-numbers t)
       (linum-mode)
      )
     (if (fboundp 'subword-mode)
         (subword-mode)
       (if (fboundp 'c-subword-mode)
           (c-subword-mode)
        )
      )
     (hl-line-mode)
     (indent-guide-mode)
     (add-to-list 'my/indented-modes major-mode)
     (local-set-key (kbd "C-c i") #'string-inflection-all-cycle)
   )
  (add-hook 'prog-mode-hook #'my/common-programming-hook)
#+END_SRC
*** C/C++
**** Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key (kbd "C-x C-o") 'ff-find-other-file)
    (cscope-minor-mode)
   )
 )

(add-hook 'c-mode-hook
  (lambda()
    (c-set-style "bsd")  ; use BSD a base but use 4 space indents and no hanging braces
    (setq c-basic-offset 4)
    (c-set-offset 'substatement-open '0)
   )
 )

(add-hook 'c++-mode-hook
  (lambda()
    (c-set-style "stroustrup")
   )
 )
#+END_SRC
**** Completion support.
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :ensure t
  :after (company irony)
  :commands (company-irony)
  :config
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))

(use-package company-irony-c-headers
  :ensure t
  :commands (company-irony-c-headers)
  :after company-irony)
#+END_SRC
*** Coffeescript
#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
   :ensure t)
#+END_SRC
*** Python
**** Virtual Environments
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :ensure t
  :config
  (setq pyvenv-workon "system")  ; Default venv
  (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals
#+END_SRC
**** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :config
    (add-hook 'python-mode-hook
	      (lambda () (if (not (string-match-p "migrations/[0-9]+_.+\.py$" (buffer-file-name)))
			     'blacken-mode))))
#+END_SRC
**** Completion
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :ensure t
  :commands (company-jedi)
  :after (company python-mode))
#+END_SRC

*** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
     :ensure t
     :mode
     (("\\.html?\\'" . web-mode)
      ("\\.jsp\\'" . web-mode)
      ("\\.json\\'" . web-mode)
      ("\\.jsx?\\'" . web-mode)
      ("\\.as[cp]x\\'" . web-mode)
      ("\\.mustache\\'" . web-mode)
      ("\\.djhtml\\'" . web-mode))
     :init
     (setq web-mode-enable-block-face t)
     (setq web-mode-enable-comment-keywords t)
     (setq web-mode-enable-current-element-highlight t)
     (setq web-mode-enable-current-column-highlight t)
     (setq web-mode-script-padding 4)
     (setq web-mode-style-padding 4)
     (setq web-mode-comment-style 4)
     (setq web-mode-code-indent-offset 4)
     (setq web-mode-markup-indent-offset 4))
#+END_SRC

* Key bindings
** my global keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>")   'beginning-of-line)
(global-set-key (kbd "<end>")    'end-of-line)
(global-set-key (kbd "M-<home>") 'beginning-of-buffer)
(global-set-key (kbd "M-<end>")  'end-of-buffer)
(global-set-key (kbd "C-<home>") 'beginning-of-buffer)
(global-set-key (kbd "C-<end>")  'end-of-buffer)
(global-set-key (kbd "M-g")      'goto-line)
(global-set-key (kbd "M-<up>")   'shaleh-move-line-up)
(global-set-key (kbd "M-<down>") 'shaleh-move-line-down)
(global-set-key (kbd "C-r")      'isearch-backward-regexp)
(global-set-key (kbd "C-s")      'isearch-forward-regexp)
(global-set-key (kbd "C-z")      nil)  ;; No more shrinking!!
(global-set-key (kbd "C-c #")    'comment-dwim) ; use C-u C-c # to uncomment
(global-set-key (kbd "C-x C-d")  'my/find-related-file)
(global-set-key (kbd "C-x a r")  'align-regexp)
(global-set-key (kbd "C-x C-m")  'execute-extended-command)
;; s is the Windows key aka super. On Macs this is the Command key.
(global-set-key (kbd "s-b")      'browse-url)
;; Stop flipping into overwrite mode!!
(global-unset-key [insert])
;; Prevent accidental exits.
(global-unset-key (kbd "C-x C-c"))
#+END_SRC

** Set META key to the 'option' key on MacOS

#+BEGIN_SRC emacs-lisp
(setq mac-option-key-is-meta t)
(setq mac-command-key-is-meta nil)
(setq mac-command-modifier nil)
(setq mac-option-modifier 'meta)
#+END_SRC

* Aliases

#+BEGIN_SRC emacs-lisp
(defalias 'qr 'query-replace)
(defalias 'qrr 'query-replace-regexp)
#+END_SRC

* Look & Feel
** Remove startup welcome screen
The code block below toggles off the welcome startup screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Minimize the UI

#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
   (tool-bar-mode -1)
 )

(when (fboundp 'scroll-bar-mode)
   (scroll-bar-mode -1)
 )
#+END_SRC

** Show column and line in mode bar

#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

** Theme support
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory (convert-standard-filename "themes")))
(use-package nord-theme
	     :ensure t)
(use-package solarized-theme
	     :ensure t)
(use-package gruvbox-theme
	     :ensure t)
(load-theme 'solarized-dark)
#+END_SRC
** Set default FACE

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
		    :family "Inconsolata" :height 140 :weight 'normal)
#+END_SRC

** Frame size

#+BEGIN_SRC emacs-lisp
(when window-system (set-frame-size (selected-frame) 100 60))
#+END_SRC

* Behavior
** Common
*** Show parens

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Highlight when searching and replacing

#+BEGIN_SRC emacs-lisp
(setq
      search-highlight t         ;; highlight when searching
      query-replace-highlight t  ;; and replacing
 )
#+END_SRC
*** Unique Buffer name style

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC
* Things to load on startup
** Load eshell at end of startup

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (eshell)))
#+END_SRC

** Setup emacs as a server

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (server-start)))

(defun my/kill-buffer-or-server-edit ()
  (interactive)
  (if server-buffer-clients
      (server-edit)
    (kill-buffer)))

;; make C-x k work for emacsclient sessions too.
(add-hook 'server-switch-hook
  (lambda ()
    (local-set-key (kbd "C-x k") 'my/kill-buffer-or-server-edit)))
#+END_SRC
